
[[plugins]]
repo = 'neoclide/coc.nvim'
merged = 0
rev = 'release'
hook_add = '''
    let g:coc_snippet_next = '<TAB>'
    let g:coc_snippet_prev = '<S-TAB>'
    let g:coc_status_error_sign = '•'
    let g:coc_status_warning_sign = '•'
    let g:coc_global_extensions =[
		\ 'coc-snippets',
		\ 'coc-pairs',
		\ 'coc-json',
		\ 'coc-highlight',
		\ 'coc-git',
		\ 'coc-emoji',
		\ 'coc-lists',
		\ 'coc-stylelint',
		\ 'coc-yaml',
		\ 'coc-gitignore',
		\ 'coc-yank',
		\ 'coc-actions',
		\ 'coc-db',
		\ 'coc-spell-checker',
		\ 'coc-vimlsp',
		\ 'coc-explorer',
		\ 'coc-style-helper',
		\ 'coc-react-refactor',
		\ 'coc-css',
		\ 'coc-vetur',
		\ 'coc-pyright',
		\ 'coc-html',
		\ 'coc-rainbow-fart',
		\]

    augroup coc_event
      autocmd!
      " Setup formatexpr specified filetype(s).
      autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
      " Update signature help on jump placeholder
      autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

    " Highlight symbol under cursor on CursorHold
    autocmd CursorHold * silent call CocActionAsync('highlight')
		inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
		inoremap <silent><expr> <C-x><C-z> coc#pum#visible() ? coc#pum#stop() : "\<C-x>\<C-z>"
		" remap for complete to use tab and <cr>
		inoremap <silent><expr> <TAB>
					\ coc#pum#visible() ? coc#pum#next(1):
					\ <SID>check_back_space() ? "\<Tab>" :
					\ coc#refresh()
		inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
		inoremap <silent><expr> <c-space> coc#refresh()

    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction
'''

[[plugins]]
repo = 'honza/vim-snippets'
depends = 'coc.nvim'
if = 'has("python3")'
merged =  0
